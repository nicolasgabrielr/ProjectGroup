diff --git a/app.rb b/app.rb
index 90f00b8..96f2f4a 100644
--- a/app.rb
+++ b/app.rb
@@ -4,26 +4,25 @@ require 'sinatra-websocket'
 include FileUtils::Verbose
 
 class App < Sinatra::Base
-
   configure do
     enable :logging
     enable :sessions
     set :session_fail, '/'
-    set :session_secret, "otro secret pero dificil y abstracto"
+    set :session_secret, 'otro secret pero dificil y abstracto'
     set :sessions, true
-  set :server, 'thin'
+    set :server, 'thin'
     set :sockets, []
   end
 
   get '/' do
     if !request.websocket?
       get_public_documents
-      erb :index, :layout => :layout_public_records
+      erb :index, layout: :layout_public_records
     else
       request.websocket do |ws|
         user = session[:user_id]
         logger.info(user)
-        @connection = {user: user, socket: ws}
+        @connection = { user: user, socket: ws }
         ws.onopen do
           settings.sockets << @connection
         end
@@ -32,23 +31,21 @@ class App < Sinatra::Base
   end
 
   def update_number_notifications_with_ws
-    settings.sockets.each{|s| alert_notification(s[:user])
-    s[:socket].send(@alert.to_s)
-  }
+    settings.sockets.each do |s|
+      alert_notification(s[:user])
+      s[:socket].send(@alert.to_s)
+    end
   end
 
   post '/tagg' do
-   @tagged = params["tagg"]
-   document = Document.find(id: params["doc"])
-   if @tagged != nil
-     @tagged.map{|u| tagg_user(u,document)}
-   end
-   document.update(description: params["description"], resolution: params["resolution"])
-   update_number_notifications_with_ws
-   redirect "/myrecords"
+    @tagged = params['tagg']
+    document = Document.find(id: params['doc'])
+    @tagged&.map { |u| tagg_user(u, document)}
+    document.update(description: params['description'], resolution: params['resolution'])
+    update_number_notifications_with_ws
+    redirect '/myrecords'
   end
 
-
   superAdmin_Pages = ['/assign']
   admin_Pages = ['/tagg', '/upload', '/load', '/uploadrecord']
   public_Pages = ['/index', '/sign_in', '/', '/about', '/newUser', '/tablas']
@@ -75,29 +72,27 @@ class App < Sinatra::Base
   end
 
   def not_authorized_category_for_admin?
-    @current_user.category != "superAdmin"
+    @current_user.category != 'superAdmin'
   end
 
   def not_authorized_category_for_user?
-    @current_user.category != "superAdmin" && @current_user.category != "admin"
+    @current_user.category != 'superAdmin' && @current_user.category != 'admin'
   end
 
   def set_menu
-    if user_not_logged_in?
-      redirect '/index'
-    end
+    redirect '/index' if user_not_logged_in?
     case @current_user.category
-      when "superAdmin" then
-        @admin = "visible"
-        @superAdmin = "visible"
-      when "admin" then
-        @admin = "visible"
-        @superAdmin = "hidden"
-      else
-        @admin = "hidden"
-        @superAdmin = "hidden"
-      end
-        @usuario = session[:user_name]
+    when 'superAdmin'
+      @admin = 'visible'
+      @superAdmin = 'visible'
+    when 'admin'
+      @admin = 'visible'
+      @superAdmin = 'hidden'
+    else
+      @admin = 'hidden'
+      @superAdmin = 'hidden'
+    end
+    @usuario = session[:user_name]
   end
 
   def get_public_documents
@@ -114,22 +109,22 @@ class App < Sinatra::Base
     @not_checkeds = documents_array(user_docs)
     user_docs = Document.by_ids(Notification.documents_id_checkeds_by_user(session[:user_id]))
     @checkeds = documents_array(user_docs)
-    erb:user_documents , :layout => :layout_loged_menu
+    erb :user_documents, layout: :layout_loged_menu
   end
 
   post '/user_documents' do
-    if params["path"]
-      doc_id = Document.first(path: "/#{params["path"]}")
+    if params['path']
+      doc_id = Document.first(path: "/#{params['path']}")
       notification_checked = Notification.first(user_id: session[:user_id], document_id: doc_id.id)
       notification_checked.update(checked: true)
     end
-    @path =  "/#{params["path"]}"
-    erb:view_doc , :layout => :layout_loged_menu
+    @path = "/#{params['path']}"
+    erb :view_doc, layout: :layout_loged_menu
   end
 
   post '/check_documents' do
-    if params["path"]
-      doc_id = Document.first(path: "/#{params["path"]}")
+    if params['path']
+      doc_id = Document.first(path: "/#{params['path']}")
       notification_checked = Notification.first(user_id: session[:user_id], document_id: doc_id.id)
       notification_checked.update(checked: true)
     end
@@ -141,64 +136,58 @@ class App < Sinatra::Base
     ds = Document.by_user(session[:user_id])
     @arr = @arr = documents_array(ds)
     get_initial_and_final_date
-    erb:myrecords , :layout => :layout_loged_menu
+    erb :myrecords, layout: :layout_loged_menu
   end
 
   post '/myrecords' do
     if params[:delete]
-      delete_document(params["elem"])
+      delete_document(params['elem'])
       update_number_notifications_with_ws
-      redirect "/myrecords"
+      redirect '/myrecords'
     else
-      "No se pudo eliminar el documento"
+      'No se pudo eliminar el documento'
     end
     if params[:taggear]
-      @record = Document.find(filename: params["elem"])
+      @record = Document.find(filename: params['elem'])
       @dni_docc = User.select(:dni).where(id: Notification.select(:user_id).where(document_id: @record.id))
-      erb:tagg
+      erb :tagg
     end
   end
 
- def search_record (resolution,ini_d,end_d,author)
+  def search_record(resolution, ini_d, end_d, author)
     get_initial_and_final_date
-    ini_d == "" ? ini_d = @initial_date : "";
-    end_d == "" ? end_d = @end_date : "";
-    if resolution != ""
+    ini_d == '' ? ini_d = @initial_date : ''
+    end_d == '' ? end_d = @end_date : ''
+    if resolution != ''
       ds = Document.by_resolution_like(resolution)
       @arr = documents_array(ds)
     elsif ini_d || end_d
       ds = []
-      if author != ""
-        user_by_author = User.find(author)
-      end
+      user_by_author = User.find(author) if author != ''
       if user_by_author
         ds = Document.by_date_and_user(ini_d, end_d, user_by_author.id)
-      elsif (author == "")
+      elsif author == ''
         ds = Document.by_date(ini_d, end_d)
       end
       @arr = documents_array(ds)
     end
-    if @arr[0] == nil
-      @not_found_docs = "No se encontraron actas relacionadas con su busqueda.."
-    end
+    @not_found_docs = 'No se encontraron actas relacionadas con su busqueda..' if @arr[0].nil?
   end
 
   post '/search_record' do
-    search_record(params[:resolution],params[:initiate_date],params[:end_date],params[:author])
-    erb:myrecords , :layout => :layout_loged_menu
+    search_record(params[:resolution], params[:initiate_date], params[:end_date], params[:author])
+    erb :myrecords, layout: :layout_loged_menu
   end
 
   def alert_notification(user)
     @alert = Notification.number_of_uncheckeds_for_user(user)
   end
 
-  def tagg_user(dni,document)
+  def tagg_user(dni, document)
     user_tagg = User.find(dni: dni)
     if user_tagg
       not_tagged_in_document = Notification.find(user_id: user_tagg.id, document_id: document.id)
-      if !not_tagged_in_document
-        document.add_user(user_tagg)
-      end
+      document.add_user(user_tagg) unless not_tagged_in_document
     else
       request.body.rewind
       hash = Rack::Utils.parse_nested_query(request.body.read)
@@ -206,28 +195,28 @@ class App < Sinatra::Base
       string_dni = dni.to_s
       not_user_tagg = User.new(
         surname: string_dni,
-        category: "not_user",
+        category: 'not_user',
         name: string_dni,
         username: string_dni,
         dni: dni,
         password: "not_user#{string_dni}",
-        email: "#{string_dni}@email.com")
+        email: "#{string_dni}@email.com"
+      )
       if not_user_tagg.save
         document.add_user(not_user_tagg)
       else
-        [500, {}, "Internal server Error"]
+        [500, {}, 'Internal server Error']
       end
     end
   end
 
-
   get '/loged' do
     get_public_documents
-    erb:loged , :layout => :layout_loged_menu
+    erb :loged, layout: :layout_loged_menu
   end
 
   post '/loged' do
-    if params[:dni] != "" && params[:dni] != nil
+    if params[:dni] != '' && !params[:dni].nil?
       user = User.find(dni: params[:dni])
       if user
         public_docs = user.documents(deleted: false)
@@ -235,61 +224,61 @@ class App < Sinatra::Base
       else
         get_public_documents
       end
-    elsif (params[:resolution] != "" || params[:initiate_date] != "" || params[:end_date] != "")
-        search_record(params[:resolution],params[:initiate_date],params[:end_date],"")
-     else
-        get_public_documents
+    elsif params[:resolution] != '' || params[:initiate_date] != '' || params[:end_date] != ''
+      search_record(params[:resolution], params[:initiate_date], params[:end_date], '')
+    else
+      get_public_documents
     end
-      erb:loged , :layout => :layout_loged_menu
+    erb :loged, layout: :layout_loged_menu
   end
 
   post '/sign_in' do
     get_public_documents
-    usuario = User.find(email: params["email"])
-    if usuario != nil && (usuario.password == params["password"])
+    usuario = User.find(email: params['email'])
+    if !usuario.nil? && (usuario.password == params['password'])
       session[:user_name] = usuario.name
       session[:user_id] = usuario.id
       @current_user = User.find(id: session[:user_id])
       set_menu
       alert_notification(session[:user_id])
-      erb:loged , :layout => :layout_loged_menu
-    elsif usuario == nil
-      @log_err = "El usuario ingresado no existe"
-      erb:index , :layout => :layout_public_records
+      erb :loged, layout: :layout_loged_menu
+    elsif usuario.nil?
+      @log_err = 'El usuario ingresado no existe'
+      erb :index, layout: :layout_public_records
     else
-      @log_err = "La contraseÃ±a ingresada es incorrecta"
-      erb:index , :layout => :layout_public_records
+      @log_err = 'La contraseÃ±a ingresada es incorrecta'
+      erb :index, layout: :layout_public_records
     end
   end
 
   post '/assign' do
     docs = Document.order_by_date
-    @arr= documents_array(docs)
-      if checkpass(params["passwordActual"])
-        usuario = User.find(email: params["emailnewAdmin"])
-        if params[:dUser] && usuario != nil
-          usuario.destroy
-          @band = "Â¡El usuario ha sido eliminado con Exito!"
-        else
-          @band = "Â¡El usuario no existe o no se pudo eliminar!"
-        end
-        if params[:admin]
-          usuario.update(category:"admin")
-          @band = "Â¡El Administrador ha sido cargado con exito!"
-        elsif params[:sAdmin]
-          usuario.update(category:"superAdmin")
-          @band = "Â¡El Administrador ha sido cargado con exito!"
-        end
+    @arr = documents_array(docs)
+    if checkpass(params['passwordActual'])
+      usuario = User.find(email: params['emailnewAdmin'])
+      if params[:dUser] && !usuario.nil?
+        usuario.destroy
+        @band = 'Â¡El usuario ha sido eliminado con Exito!'
       else
-        @band = "El password es incorrecto o el usuario no existe"
+        @band = 'Â¡El usuario no existe o no se pudo eliminar!'
+      end
+      if params[:admin]
+        usuario.update(category: 'admin')
+        @band = 'Â¡El Administrador ha sido cargado con exito!'
+      elsif params[:sAdmin]
+        usuario.update(category: 'superAdmin')
+        @band = 'Â¡El Administrador ha sido cargado con exito!'
       end
+    else
+      @band = 'El password es incorrecto o el usuario no existe'
+    end
 
     set_menu
-    erb:assign , :layout => :layout_loged_menu
+    erb :assign, layout: :layout_loged_menu
   end
 
   get '/assign' do
-    erb :assign , :layout => :layout_loged_menu
+    erb :assign, layout: :layout_loged_menu
   end
 
   get '/sign_in' do
@@ -297,52 +286,52 @@ class App < Sinatra::Base
     if session[:user_id]
 
       set_menu
-      erb:loged , :layout => :layout_loged_menu
+      erb :loged, layout: :layout_loged_menu
     else
-      erb:index , :layout => :layout_public_records
+      erb :index, layout: :layout_public_records
     end
   end
 
   get '/sign_out' do
     session.clear
-    erb:index , :layout => :layout_public_records
+    erb :index, layout: :layout_public_records
   end
 
-  get "/notificationlist" do
-    erb:notificationlist
+  get '/notificationlist' do
+    erb :notificationlist
   end
 
-  get "/index" do
+  get '/index' do
     get_public_documents
     session.clear
-    erb :index , :layout => :layout_public_records
+    erb :index, layout: :layout_public_records
   end
 
-  post "/index" do
-    if params[:dni] != "" && params[:dni] != nil
+  post '/index' do
+    if params[:dni] != '' && !params[:dni].nil?
       user = User.find(dni: params[:dni])
       if user
-        public_docs = user.documents_dataset.where(deleted: false).reverse_order{documents[:realtime]}
+        public_docs = user.documents_dataset.where(deleted: false).reverse_order {documents[:realtime]}
         @arr = documents_array(public_docs)
       else
         get_public_documents
       end
-    elsif ((params[:resolution] != "" && params[:resolution] != nil) ||
-     (params[:initiate_date] != "" && params[:initiate_date] != nil) ||
-      (params[:end_date] != "" && params[:end_date] != nil))
-        search_record(params[:resolution],params[:initiate_date],params[:end_date],"")
-     else
-        get_public_documents
+    elsif (params[:resolution] != '' && !params[:resolution].nil?) ||
+          (params[:initiate_date] != '' && !params[:initiate_date].nil?) ||
+          (params[:end_date] != '' && !params[:end_date].nil?)
+      search_record(params[:resolution], params[:initiate_date], params[:end_date], '')
+    else
+      get_public_documents
     end
-    erb :index , :layout => :layout_public_records
+    erb :index, layout: :layout_public_records
   end
 
-  get "/about" do
-    erb:about
+  get '/about' do
+    erb :about
   end
 
   get '/newUser' do
-    erb:newUser
+    erb :newUser
   end
 
   get '/mydata' do
@@ -352,117 +341,117 @@ class App < Sinatra::Base
     @name = @current_user.name
     @surname = @current_user.surname
     @dni = @current_user.dni
-    erb:mydata , :layout => :layout_loged_menu
+    erb :mydata, layout: :layout_loged_menu
   end
   get '/modifyData' do
-    erb:modifyData , :layout => :layout_loged_menu
+    erb :modifyData, layout: :layout_loged_menu
   end
 
   post '/modifyData' do
-    @current_user.update(name: params["newName"])
-    @current_user.update(surname: params["newSurname"])
-    @band = "Â¡Datos actualizados corretamente!"
+    @current_user.update(name: params['newName'])
+    @current_user.update(surname: params['newSurname'])
+    @band = 'Â¡Datos actualizados corretamente!'
     set_menu
-    erb:modifyData , :layout => :layout_loged_menu
+    erb :modifyData, layout: :layout_loged_menu
   end
   get '/modifyemail' do
-    erb:modifyemail , :layout => :layout_loged_menu
+    erb :modifyemail, layout: :layout_loged_menu
   end
 
   post '/modifyemail' do
-    if checkpass(params["passwordActual"])
-      @current_user.update(email: params["emailNew1"])
-      @band = "Â¡El email ha sido Actualizado con exito!"
+    if checkpass(params['passwordActual'])
+      @current_user.update(email: params['emailNew1'])
+      @band = 'Â¡El email ha sido Actualizado con exito!'
     else
-      @band = "La contraseÃ±a o el email son Incorrectos!"
+      @band = 'La contraseÃ±a o el email son Incorrectos!'
     end
 
     set_menu
-    erb:modifyemail , :layout => :layout_loged_menu
+    erb :modifyemail, layout: :layout_loged_menu
   end
 
   get '/modifypassword' do
-    erb:modifypassword , :layout => :layout_loged_menu
+    erb :modifypassword, layout: :layout_loged_menu
   end
 
   post '/modifypassword' do
-    if checkpass(params["passwordActual"])
-      @current_user.update(password: params["passwordNew1"])
-      @band = "Â¡El password ha sido Actualizado con exito!"
+    if checkpass(params['passwordActual'])
+      @current_user.update(password: params['passwordNew1'])
+      @band = 'Â¡El password ha sido Actualizado con exito!'
     else
-      @band = "La contraseÃ±a ingresada es incorrecta"
+      @band = 'La contraseÃ±a ingresada es incorrecta'
     end
-    erb:modifypassword , :layout => :layout_loged_menu
+    erb :modifypassword, layout: :layout_loged_menu
   end
 
   get '/modifyphoto' do
-    erb:modifyphoto
+    erb :modifyphoto
   end
 
   get '/uploadrecord' do
-      erb:uploadrecord
+    erb :uploadrecord
   end
 
   post '/newUser' do
     request.body.rewind
     hash = Rack::Utils.parse_nested_query(request.body.read)
     params = JSON.parse hash.to_json
-    pre_load_user = User.find(dni: params["dni"])
-    exist_username = User.find(username: params["username"])
-    exist_email = User.find(email: params["email"])
-      if pre_load_user
-        if pre_load_user.category == "not_user"
-          pre_load_user.update(
-            surname: params["surname"],
-            category: "user",
-            name: params["name"],
-            username: params["username"],
-            dni: params["dni"],
-            password: params["key"],
-            email: params["email"]
-          )
-          redirect "/"
-        else
-          [500, {}, "El usuario ya existe"]
-        end
+    pre_load_user = User.find(dni: params['dni'])
+    exist_username = User.find(username: params['username'])
+    exist_email = User.find(email: params['email'])
+    if pre_load_user
+      if pre_load_user.category == 'not_user'
+        pre_load_user.update(
+          surname: params['surname'],
+          category: 'user',
+          name: params['name'],
+          username: params['username'],
+          dni: params['dni'],
+          password: params['key'],
+          email: params['email']
+        )
+        redirect '/'
       else
-        if (exist_username)
-          @log_err = "El usuario ingresado ya existe"
-        elsif (exist_email)
-          @log_err = "El email ingresado ya existe"
+        [500, {}, 'El usuario ya existe']
+      end
+    else
+      if exist_username
+        @log_err = 'El usuario ingresado ya existe'
+      elsif exist_email
+        @log_err = 'El email ingresado ya existe'
+      else
+        user = User.new(
+          surname: params['surname'],
+          category: 'user',
+          name: params['name'],
+          username: params['username'],
+          dni: params['dni'],
+          password: params['key'],
+          email: params['email']
+        )
+        if user.save
+          redirect '/'
         else
-          user = User.new(
-            surname: params["surname"],
-            category: "user",
-            name: params["name"],
-            username: params["username"],
-            dni: params["dni"],
-            password: params["key"],
-            email: params["email"]
-          )
-          if user.save
-            redirect "/"
-          else
-            [500, {}, "Internal server Error"]
-          end
+          [500, {}, 'Internal server Error']
         end
-        erb:newUser
       end
+      erb :newUser
+    end
   end
 
   get '/uploadImg' do
-    erb:modifyphoto
+    erb :modifyphoto
   end
 
   post '/uploadImg' do
-    if @current_user.imgpath != nil && File.exist?("public#{@current_user.imgpath}")
+    if !@current_user.imgpath.nil? && File.exist?("public#{@current_user.imgpath}")
       File.delete("public#{@current_user.imgpath}")
     end
     tempfile = params[:myImg][:tempfile]
     @filename = params[:myImg][:filename]
     cp(tempfile.path, "public/usr/#{@filename}")
     @current_user.update(imgpath: "/usr/#{@filename}")
-    redirect "/mydata"
+    redirect '/mydata'
   end
 
   post '/load' do
@@ -478,21 +467,21 @@ class App < Sinatra::Base
     request.body.rewind
     hash = Rack::Utils.parse_nested_query(request.body.read)
     params = JSON.parse hash.to_json
-    @tagged = params["tagg"]
-    cp("public/temp/#{params["path"]}","public/file/#{params["path"]}")
+    @tagged = params['tagg']
+    cp("public/temp/#{params['path']}", "public/file/#{params['path']}")
     document = Document.new(
-      resolution: params ["resolution"],
-      path: "/file/#{params["path"]}",
-      filename: params["filena"],
-      description: params["description"],
-      realtime: params["realtime"],
+      resolution: params ['resolution'],
+      path: "/file/#{params['path']}",
+      filename: params['filena'],
+      description: params['description'],
+      realtime: params['realtime'],
       user_id: @current_user.id
     )
     if document.save
       @record = document
-      erb:tagg
+      erb :tagg
     else
-      [500, {}, "Internal server Error"]
+      [500, {}, 'Internal server Error']
     end
   end
 
@@ -503,44 +492,42 @@ class App < Sinatra::Base
       ds.each { |n| n.update(checked: true)}
       deleting_doc.update(deleted: true)
     else
-      "cannot delete this Doc"
+      'cannot delete this Doc'
     end
   end
 
   def documents_array(documents)
-      documents.map{|x|
-        file = {:filename => x.filename,
-          :resolution => x.resolution,
-          :description => x.description ,
-          :date => x.realtime.strftime("%d/%m/%y") }
-      }
+    documents.map do |x|
+      file = { filename: x.filename,
+               resolution: x.resolution,
+               description: x.description,
+               date: x.realtime.strftime('%d/%m/%y') }
+    end
   end
 
   def get_initial_and_final_date
-    @initial_date = Document.first.realtime.strftime("%Y-%m-%d")
-    @end_date = ((Time.now) + 86400).strftime("%Y-%m-%d")
+    @initial_date = Document.first.realtime.strftime('%Y-%m-%d')
+    @end_date = (Time.now + 86_400).strftime('%Y-%m-%d')
   end
 
   get '/rename' do
-      docs = Document.all
-      docs.each do |i|
-        i.update(resolution: (i.id + 100000).to_s)
-        i.update(description: "UNRC acta res/#{(i.id + 100000).to_s}")
-      end
-       "rename ok"
+    docs = Document.all
+    docs.each do |i|
+      i.update(resolution: (i.id + 100_000).to_s)
+      i.update(description: "UNRC acta res/#{(i.id + 100_000)}")
+    end
+    'rename ok'
   end
 
-
   get '/tablas' do
-    @out = ""
-    User.each { |u| @out+= u.email + "--" + u.dni.to_s + "--" + u.category.to_s +  "<br/>" }
-    @out +="<br/>"
-    Document.each { |d| @out+=d.path+"<br/>" }
-    @out +="<br/>"+ "listado de documentos ----> usuarios" + "<br/>"
-    Document.each { |d| @out+= d.path + " ------relacionado con----- " + d.users.to_s + "<br/>" }
-    @out +="<br/>"+ "listado de usuarios ----> documentos" + "<br/>"
-    User.each { |u| @out+= u.email + " -----relacionado con----- " + u.documents.to_s + "<br/>" }
-    @out +="<br/>"
+    @out = ''
+    User.each { |u| @out += u.email + '--' + u.dni.to_s + '--' + u.category.to_s + '<br/>' }
+    @out += '<br/>'
+    Document.each { |d| @out += d.path + '<br/>' }
+    @out += '<br/>' + 'listado de documentos ----> usuarios' + '<br/>'
+    Document.each { |d| @out += d.path + ' ------relacionado con----- ' + d.users.to_s + '<br/>' }
+    @out += '<br/>' + 'listado de usuarios ----> documentos' + '<br/>'
+    User.each { |u| @out += u.email + ' -----relacionado con----- ' + u.documents.to_s + '<br/>' }
+    @out += '<br/>'
   end
-
 end
